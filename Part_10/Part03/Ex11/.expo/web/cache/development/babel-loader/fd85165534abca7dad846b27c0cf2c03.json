{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/johnlee/Documents/Projects/Fullstack-2020/Part_10/Part03/10.11/src/components/RepositoryList.jsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RepositoryItem from \"./RepositoryItem\";\nimport { GET_REPOSITORIES } from \"../graphql/queries\";\nimport { useQuery } from '@apollo/client';\nvar styles = StyleSheet.create({\n  separator: {\n    height: 10\n  }\n});\n\nvar ItemSeparator = function ItemSeparator() {\n  return React.createElement(View, {\n    style: styles.separator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 29\n    }\n  });\n};\n\nvar _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    repositories = _useState2[0],\n    setRepositories = _useState2[1];\n\nvar RepositoryList = function RepositoryList() {\n  var result = useQuery(GET_REPOSITORIES, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      orderDirection: 'ASC',\n      first: 10\n    }\n  });\n  useEffect(function () {\n    if (result.data !== undefined) {\n      setRepositories(result.data.repositories.edges.map(function (node) {\n        return node;\n      }));\n    }\n  }, [result.data]);\n  return React.createElement(FlatList, {\n    data: repositories,\n    ItemSeparatorComponent: ItemSeparator,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    renderItem: RepositoryItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default RepositoryList;","map":{"version":3,"sources":["/Users/johnlee/Documents/Projects/Fullstack-2020/Part_10/Part03/10.11/src/components/RepositoryList.jsx"],"names":["React","useEffect","useState","RepositoryItem","GET_REPOSITORIES","useQuery","styles","StyleSheet","create","separator","height","ItemSeparator","repositories","setRepositories","RepositoryList","result","fetchPolicy","variables","orderDirection","first","data","undefined","edges","map","node","item","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA6BC,QAA7B,QAA4C,OAA5C;;;;AAEA,OAAOC,cAAP;AACA,SAASC,gBAAT;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AADC;AADoB,CAAlB,CAAf;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAN;AAAA,CAAtB;;gBACwCP,QAAQ,E;;IAAzCU,Y;IAAcC,e;;AACrB,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,MAAM,GAAGV,QAAQ,CAACD,gBAAD,EAAmB;AACxCY,IAAAA,WAAW,EAAE,mBAD2B;AAExCC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,cAAc,EAAE,KAAlB;AAAyBC,MAAAA,KAAK,EAAE;AAAhC;AAF6B,GAAnB,CAAvB;AAKAlB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,MAAM,CAACK,IAAP,KAAgBC,SAApB,EAA+B;AAE7BR,MAAAA,eAAe,CAACE,MAAM,CAACK,IAAP,CAAYR,YAAZ,CAAyBU,KAAzB,CAA+BC,GAA/B,CAAmC,UAAAC,IAAI;AAAA,eAAIA,IAAJ;AAAA,OAAvC,CAAD,CAAf;AACD;AACF,GALQ,EAKN,CAACT,MAAM,CAACK,IAAR,CALM,CAAT;AAOA,SACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAER,YADR;AAEE,IAAA,sBAAsB,EAAED,aAF1B;AAGE,IAAA,YAAY,EAAE,sBAACc,IAAD;AAAA,aAAUA,IAAI,CAACC,EAAf;AAAA,KAHhB;AAIE,IAAA,UAAU,EAAEvB,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CArBD;;AAuBA,eAAeW,cAAf","sourcesContent":["import React, { useEffect  , useState} from 'react';\nimport { FlatList, View, StyleSheet } from 'react-native';\nimport RepositoryItem from './RepositoryItem';\nimport { GET_REPOSITORIES } from '../graphql/queries';\nimport { useQuery } from '@apollo/client';\n\nconst styles = StyleSheet.create({\n  separator: {\n    height: 10,\n  },\n});\n\nconst ItemSeparator = () => <View style={styles.separator} />;\nconst [repositories, setRepositories] = useState();\nconst RepositoryList = () => {\n  const result = useQuery(GET_REPOSITORIES, {\n    fetchPolicy: \"cache-and-network\",\n    variables: { orderDirection: 'ASC', first: 10},\n  });\n\n  useEffect(() => {\n    if (result.data !== undefined) {\n\n      setRepositories(result.data.repositories.edges.map(node => node));\n    }\n  }, [result.data]);\n\n  return (\n    <FlatList\n      data={repositories}\n      ItemSeparatorComponent={ItemSeparator}\n      keyExtractor={(item) => item.id}\n      renderItem={RepositoryItem}\n    />\n  );\n};\n\nexport default RepositoryList;"]},"metadata":{},"sourceType":"module"}