{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/johnlee/Documents/Projects/Fullstack-2020/Part_10/Part03/10.11/src/components/RepositoryList.jsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RepositoryItem from \"./RepositoryItem\";\nimport { GET_REPOSITORIES } from \"../graphql/queries\";\nimport { useQuery } from '@apollo/client';\nvar styles = StyleSheet.create({\n  separator: {\n    height: 10\n  }\n});\n\nvar ItemSeparator = function ItemSeparator() {\n  return React.createElement(View, {\n    style: styles.separator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 29\n    }\n  });\n};\n\nvar RepositoryList = function RepositoryList() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      repositories = _useState2[0],\n      setRepositories = _useState2[1];\n\n  var result = useQuery(GET_REPOSITORIES, {\n    fetchPolicy: \"cache-and-network\",\n    variables: {\n      orderDirection: 'ASC',\n      first: 10\n    }\n  });\n  useEffect(function () {\n    if (result.data !== undefined && !result.loading) {\n      setRepositories(result.data.repositories.edges.map(function (node) {\n        console.log(node.fullname);\n        return {\n          id: node.id\n        };\n      }));\n    }\n  }, [result.data]);\n\n  if (result.data !== undefined) {\n    console.log(repositories);\n  }\n\n  return React.createElement(FlatList, {\n    data: repositories,\n    ItemSeparatorComponent: ItemSeparator,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    renderItem: RepositoryItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default RepositoryList;","map":{"version":3,"sources":["/Users/johnlee/Documents/Projects/Fullstack-2020/Part_10/Part03/10.11/src/components/RepositoryList.jsx"],"names":["React","useEffect","useState","RepositoryItem","GET_REPOSITORIES","useQuery","styles","StyleSheet","create","separator","height","ItemSeparator","RepositoryList","repositories","setRepositories","result","fetchPolicy","variables","orderDirection","first","data","undefined","loading","edges","map","node","console","log","fullname","id","item"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,OAAOC,cAAP;AACA,SAASC,gBAAT;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AADC;AADoB,CAAlB,CAAf;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAN;AAAA,CAAtB;;AAEA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,kBACaV,QAAQ,EADrB;AAAA;AAAA,MACpBW,YADoB;AAAA,MACNC,eADM;;AAE3B,MAAMC,MAAM,GAAGV,QAAQ,CAACD,gBAAD,EAAmB;AACxCY,IAAAA,WAAW,EAAE,mBAD2B;AAExCC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,cAAc,EAAE,KAAlB;AAAyBC,MAAAA,KAAK,EAAE;AAAhC;AAF6B,GAAnB,CAAvB;AAKAlB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,MAAM,CAACK,IAAP,KAAgBC,SAAhB,IAA6B,CAACN,MAAM,CAACO,OAAzC,EAAkD;AAChDR,MAAAA,eAAe,CAACC,MAAM,CAACK,IAAP,CAAYP,YAAZ,CAAyBU,KAAzB,CAA+BC,GAA/B,CAAmC,UAAAC,IAAI,EAAI;AACzDC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAjB;AACA,eAAO;AACLC,UAAAA,EAAE,EAACJ,IAAI,CAACI;AADH,SAAP;AAID,OANe,CAAD,CAAf;AAOD;AACF,GAVQ,EAUN,CAACd,MAAM,CAACK,IAAR,CAVM,CAAT;;AAYA,MAAIL,MAAM,CAACK,IAAP,KAAgBC,SAApB,EAA+B;AAC7BK,IAAAA,OAAO,CAACC,GAAR,CAAYd,YAAZ;AACD;;AAED,SACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEA,YADR;AAEE,IAAA,sBAAsB,EAAEF,aAF1B;AAGE,IAAA,YAAY,EAAE,sBAACmB,IAAD;AAAA,aAAUA,IAAI,CAACD,EAAf;AAAA,KAHhB;AAIE,IAAA,UAAU,EAAE1B,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CA/BD;;AAiCA,eAAeS,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FlatList, View, StyleSheet } from 'react-native';\nimport RepositoryItem from './RepositoryItem';\nimport { GET_REPOSITORIES } from '../graphql/queries';\nimport { useQuery } from '@apollo/client';\n\nconst styles = StyleSheet.create({\n  separator: {\n    height: 10,\n  },\n});\n\nconst ItemSeparator = () => <View style={styles.separator} />;\n\nconst RepositoryList = () => {\n  const [repositories, setRepositories] = useState();\n  const result = useQuery(GET_REPOSITORIES, {\n    fetchPolicy: \"cache-and-network\",\n    variables: { orderDirection: 'ASC', first: 10 },\n  });\n\n  useEffect(() => {\n    if (result.data !== undefined && !result.loading) {\n      setRepositories(result.data.repositories.edges.map(node => {\n        console.log(node.fullname);\n        return {\n          id:node.id,\n        };\n\n      }));\n    }\n  }, [result.data]);\n\n  if (result.data !== undefined) {\n    console.log(repositories);\n  }\n\n  return (\n    <FlatList\n      data={repositories}\n      ItemSeparatorComponent={ItemSeparator}\n      keyExtractor={(item) => item.id}\n      renderItem={RepositoryItem}\n    />\n  );\n};\n\nexport default RepositoryList;"]},"metadata":{},"sourceType":"module"}